module CalculatedFormulas where

import qualified Data.Map as Map
import Formula(Formula)
import ParseCnf
import NormalForm(getStats,FormulaStats(..))
import Data.Maybe(fromJust)
import Data.List(intercalate, delete)
import qualified Data.Set as Set
import Data.Maybe

formulas :: Map.Map String (Map.Map String (Map.Map Int Formula))
formulas = Map.fromList [
    ("OptNatNoExtra", Map.fromList [
        ("add", Map.fromList [
            -- 4/9:
            (1, parseCnf "((-1 || 2) && (-0 || 2) && (-0 || -1) && (0 || 1 || -2))"),
            -- 11/32:
            (2, parseCnf "((-3 || 5) && (-1 || 5) && (-1 || -3) && (0 || 2 || -4) && (-2 || 4 || 5) && (-2 || -3 || 4) && (-1 || -2 || 4) && (-0 || -2 || -4) && (-0 || 2 || 4) && (1 || 3 || -4 || -5) && (0 || 1 || 3 || -5))"),
            -- 24/90:
            (3, parseCnf "((-5 || 8) && (-2 || 8) && (-2 || -5) && (0 || 3 || -6) && (-1 || -4 || 8) && (-1 || -4 || -5) && (-1 || -2 || -4) && (-0 || 3 || 6) && (0 || -3 || 6) && (-1 || 4 || -6 || 7) && (1 || -4 || -6 || 7) && (1 || 4 || -6 || -7) && (-0 || -3 || 7 || 8) && (-0 || -3 || -5 || 7) && (-0 || -2 || -3 || 7) && (0 || -1 || 4 || 7) && (0 || 1 || -4 || 7) && (0 || 1 || 4 || -7) && (2 || 5 || -6 || -7 || -8) && (1 || 2 || 4 || 5 || -8) && (-0 || -1 || -3 || -4 || 7) && (-0 || -1 || -3 || 4 || -7) && (-0 || 1 || -3 || -4 || -7) && (0 || 2 || 5 || -7 || -8))"),
            -- (43/191):
            (4, parseCnf "((-3 || -7) && (-7 || 11) && (-3 || 11) && (0 || 4 || -8) && (0 || -4 || 8) && (-1 || -5 || -8 || -9) && (1 || -5 || -8 || 9) && (0 || 1 || -5 || 9) && (1 || 5 || -8 || -9) && (-1 || -7 || 9 || 10) && (-0 || -4 || -5 || -7 || 10) && (-0 || -1 || -4 || -5 || 9) && (-0 || -3 || -4 || -5 || 10) && (-1 || -3 || 9 || 10) && (-1 || -2 || 6 || 9 || -10) && (-2 || -6 || 11) && (1 || 2 || 6 || -9 || -10) && (1 || 2 || -6 || -9 || 10) && (-2 || 5 || 6 || -8 || 10) && (0 || 1 || 5 || -9) && (-0 || 1 || -4 || 5 || 9) && (2 || 5 || -6 || -8 || 10) && (1 || -2 || 6 || -9 || 10) && (-1 || -2 || -6 || 9 || 10) && (-2 || -3 || -6) && (3 || 5 || 7 || -8 || -10 || -11) && (0 || -2 || 5 || 6 || 10) && (-0 || -2 || -4 || -5 || -6 || 10) && (0 || 2 || 5 || -6 || 10) && (-1 || 4 || -5 || -9) && (-1 || 9 || 10 || 11) && (1 || 3 || 7 || -9 || -10 || -11) && (2 || 3 || 6 || 7 || -11) && (-0 || -1 || -4 || 5 || -9) && (2 || 4 || 5 || 6 || -10) && (-0 || 2 || -4 || -5 || -6 || -10) && (-0 || -4 || -5 || 10 || 11) && (-0 || 4 || 8) && (-1 || 2 || -6 || 9 || -10) && (-2 || -6 || -7) && (0 || 3 || 5 || 7 || -10 || -11) && (2 || 5 || 6 || -8 || -10) && (-0 || -2 || -4 || -5 || 6 || -10))")
        ]),
        ("mul", Map.fromList [
            -- 3/7:
            (1, parseCnf "((1 || -2) && (0 || -2) && (-0 || -1 || 2))"),
            -- 9/24:
            (2, parseCnf "((-1 || -3) && (0 || -4) && (0 || -3 || -5) && (-0 || -2 || 4) && (-1 || 2 || -5) && (-0 || -3 || 5) && (2 || -4) && (1 || 3 || -5) && (-1 || -2 || 5))"),
            -- 20/57:
            (3, parseCnf "((-1 || -5) && (0 || -6) && (-1 || -4 || -6) && (-0 || -5 || 8) && (3 || -6) && (0 || -5 || -8) && (-2 || -3 || 8) && (1 || 4 || -7) && (0 || 3 || -7) && (-1 || -4 || 8) && (3 || 4 || -7) && (-1 || -3 || 7) && (0 || 1 || -7) && (-2 || -5) && (-2 || 3 || -8) && (2 || 4 || 5 || -8) && (1 || 2 || 5 || -8) && (-2 || -4) && (-0 || -3 || 6) && (-0 || -4 || 7))"),
            -- 37/123:
            (4, parseCnf "((-3 || -7) && (-3 || -6) && (-2 || -6) && (-2 || -7) && (0 || -8) && (4 || -8) && (-0 || -4 || 8) && (-0 || -7 || 11) && (-2 || -5 || 11) && (-2 || -4 || 10) && (0 || 4 || -9) && (4 || 5 || -9) && (0 || 1 || -9) && (-1 || -6 || 11) && (-0 || -5 || 9 || -10) && (-1 || -5 || 10 || 11) && (0 || 1 || 2 || -10) && (2 || 6 || -10 || -11) && (0 || 2 || 5 || -10) && (4 || 5 || 6 || -10) && (2 || 6 || -8 || -10) && (-1 || -4 || 9 || -10) && (-1 || -5 || 8 || 10) && (-1 || 3 || -4 || 6 || -9 || -11) && (3 || 5 || 6 || 7 || -11) && (-0 || 1 || -5 || 9) && (-1 || -4 || 5 || 9) && (1 || 4 || 6 || -10) && (-3 || 4 || -11) && (0 || -7 || -11) && (-0 || -1 || -5 || -6) && (-0 || -6 || 10) && (1 || 2 || 3 || 7 || -11) && (-1 || -7) && (-3 || -5) && (1 || 5 || -9) && (-3 || -4 || 11))")
        ]),
        ("gt", Map.fromList [
            -- 2/2:
            (1, parseCnf "((-1) && (0))"),
            -- 5/10:
            (2, parseCnf "((1 || -2) && (-2 || -3) && (1 || -3) && (0 || -3) && (0 || 1))"),
            -- 11/32:
            (3, parseCnf "((-3 || -4 || -5) && (0 || -4 || -5) && (1 || -3 || -5) && (2 || -3 || -4) && (1 || -4 || -5) && (0 || 2 || -4) && (2 || -5) && (1 || 2 || -3) && (0 || 1 || -5) && (1 || 2 || -4) && (0 || 1 || 2))"),
            -- 23/88:
            (4, parseCnf "((3 || -7) && (2 || 3 || -6) && (1 || -4 || -6 || -7) && (0 || -5 || -6 || -7) && (3 || -4 || -5 || -6) && (2 || -4 || -5 || -7) && (2 || 3 || -4 || -5) && (1 || 2 || -4 || -7) && (0 || 1 || -6 || -7) && (1 || 3 || -5 || -6) && (0 || 3 || -5 || -6) && (0 || 2 || -5 || -7) && (1 || 3 || -4 || -6) && (-4 || -5 || -6 || -7) && (1 || 2 || 3 || -5) && (1 || 2 || 3 || -4) && (1 || -5 || -6 || -7) && (0 || 1 || 3 || -6) && (0 || 1 || 2 || -7) && (0 || 1 || 2 || 3) && (1 || 2 || -5 || -7) && (2 || -6 || -7) && (0 || 2 || 3 || -5))"),
            -- 47/224:
            (5, parseCnf "((4 || -9) && (3 || -8 || -9) && (2 || 4 || -7 || -8) && (2 || 3 || -7 || -9) && (0 || -6 || -7 || -8 || -9) && (4 || -5 || -6 || -7 || -8) && (3 || 4 || -8) && (1 || -5 || -7 || -8 || -9) && (0 || 1 || -7 || -8 || -9) && (3 || 4 || -5 || -6 || -7) && (0 || 4 || -6 || -7 || -8) && (2 || 3 || -5 || -6 || -9) && (0 || 3 || -6 || -7 || -9) && (0 || 2 || -6 || -8 || -9) && (2 || 3 || 4 || -7) && (1 || 2 || -5 || -8 || -9) && (1 || 3 || -5 || -7 || -9) && (1 || 4 || -5 || -7 || -8) && (2 || 4 || -5 || -6 || -8) && (1 || 4 || -6 || -7 || -8) && (0 || 2 || 3 || -6 || -9) && (2 || -5 || -6 || -8 || -9) && (1 || 3 || 4 || -6 || -7) && (0 || 1 || 3 || -7 || -9) && (0 || 2 || 4 || -6 || -8) && (1 || 3 || -6 || -7 || -9) && (0 || 3 || 4 || -6 || -7) && (-5 || -6 || -7 || -8 || -9) && (1 || 2 || 4 || -6 || -8) && (1 || 2 || 3 || -5 || -9) && (2 || 3 || 4 || -5 || -6) && (0 || 1 || 4 || -7 || -8) && (2 || -7 || -8 || -9) && (0 || 2 || 3 || 4 || -6) && (1 || 2 || 3 || -6 || -9) && (0 || 1 || 2 || -8 || -9) && (1 || 2 || 3 || 4 || -5) && (1 || 2 || 4 || -5 || -8) && (3 || -5 || -6 || -7 || -9) && (1 || 2 || 3 || 4 || -6) && (1 || 3 || 4 || -5 || -7) && (0 || 1 || 2 || 3 || -9) && (1 || -6 || -7 || -8 || -9) && (0 || 1 || 3 || 4 || -7) && (0 || 1 || 2 || 4 || -8) && (1 || 2 || -6 || -8 || -9) && (0 || 1 || 2 || 3 || 4))"),
            -- 95/544:
            (6, parseCnf "((3 || -9 || -10 || -11) && (2 || -8 || -9 || -10 || -11) && (-6 || -7 || -8 || -9 || -10 || -11) && (3 || -6 || -7 || -8 || -10 || -11) && (4 || -6 || -7 || -8 || -9 || -11) && (2 || -6 || -7 || -9 || -10 || -11) && (1 || -6 || -8 || -9 || -10 || -11) && (5 || -6 || -7 || -8 || -9 || -10) && (1 || -7 || -8 || -9 || -10 || -11) && (2 || 4 || -6 || -7 || -9 || -11) && (1 || 5 || -6 || -8 || -9 || -10) && (1 || 4 || -6 || -8 || -9 || -11) && (1 || 3 || -6 || -8 || -10 || -11) && (1 || 2 || -7 || -9 || -10 || -11) && (3 || 5 || -6 || -7 || -8 || -10) && (4 || 5 || -6 || -7 || -8 || -9) && (2 || 3 || -8 || -10 || -11) && (0 || 1 || -8 || -9 || -10 || -11) && (0 || -7 || -8 || -9 || -10 || -11) && (1 || 3 || -7 || -8 || -10 || -11) && (1 || 2 || -6 || -9 || -10 || -11) && (3 || 4 || -6 || -7 || -8 || -11) && (2 || 5 || -6 || -7 || -9 || -10) && (2 || 3 || -6 || -7 || -10 || -11) && (1 || 4 || -7 || -8 || -9 || -11) && (0 || 3 || -7 || -8 || -10 || -11) && (0 || 5 || -7 || -8 || -9 || -10) && (1 || 3 || 5 || -7 || -8 || -10) && (2 || 4 || 5 || -6 || -7 || -9) && (0 || 4 || -7 || -8 || -9 || -11) && (1 || 3 || 4 || -7 || -8 || -11) && (1 || 2 || 3 || -6 || -10 || -11) && (1 || 3 || 4 || -6 || -8 || -11) && (0 || 2 || 3 || 4 || -7 || -11) && (1 || 2 || 5 || -7 || -9 || -10) && (1 || 2 || 5 || -6 || -9 || -10) && (1 || 2 || 4 || -6 || -9 || -11) && (1 || 4 || 5 || -7 || -8 || -9) && (0 || 3 || 5 || -7 || -8 || -10) && (2 || 3 || 5 || -8 || -10) && (0 || 1 || 5 || -8 || -9 || -10) && (2 || 3 || 4 || -6 || -7 || -11) && (1 || 3 || 4 || 5 || -7 || -8) && (0 || 4 || 5 || -7 || -8 || -9) && (3 || 4 || 5 || -6 || -7 || -8) && (1 || 2 || 3 || 4 || -7 || -11) && (0 || 2 || 4 || -7 || -9 || -11) && (4 || -10 || -11) && (0 || 1 || 2 || -9 || -10 || -11) && (1 || 3 || 5 || -6 || -8 || -10) && (1 || 2 || 3 || 4 || 5 || -7) && (0 || 2 || 4 || 5 || -7 || -9) && (0 || 2 || 5 || -7 || -9 || -10) && (1 || 2 || 3 || 5 || -7 || -10) && (4 || 5 || -10) && (0 || 1 || 2 || 5 || -9 || -10) && (0 || 3 || 4 || 5 || -7 || -8) && (0 || 2 || 3 || 5 || -7 || -10) && (1 || 2 || 4 || 5 || -7 || -9) && (1 || 3 || 4 || 5 || -6 || -8) && (5 || -11) && (0 || 1 || 2 || 4 || -9 || -11) && (2 || 3 || 4 || 5 || -8) && (0 || 1 || 4 || 5 || -8 || -9) && (1 || 5 || -7 || -8 || -9 || -10) && (0 || 3 || 4 || -7 || -8 || -11) && (2 || 3 || 4 || 5 || -6 || -7) && (1 || 4 || 5 || -6 || -8 || -9) && (3 || 4 || -9 || -11) && (0 || 1 || 2 || 3 || -10 || -11) && (0 || 2 || 3 || 4 || 5 || -7) && (0 || 2 || 3 || -7 || -10 || -11) && (1 || 2 || 4 || -7 || -9 || -11) && (0 || 1 || 2 || 3 || 4 || 5) && (2 || 5 || -8 || -9 || -10) && (0 || 1 || 3 || 4 || -8 || -11) && (1 || 2 || 3 || 4 || 5 || -6) && (0 || 1 || 3 || 4 || 5 || -8) && (2 || 4 || -8 || -9 || -11) && (0 || 1 || 3 || -8 || -10 || -11) && (1 || 2 || 3 || 5 || -6 || -10) && (3 || 4 || 5 || -9) && (0 || 1 || 2 || 3 || 5 || -10) && (3 || 5 || -9 || -10) && (0 || 1 || 2 || 3 || 4 || -11) && (2 || 3 || 4 || -8 || -11) && (0 || 1 || 4 || -8 || -9 || -11) && (1 || 2 || 4 || 5 || -6 || -9) && (0 || 2 || -7 || -9 || -10 || -11) && (1 || 2 || 3 || -7 || -10 || -11) && (0 || 1 || 2 || 4 || 5 || -9) && (2 || 4 || 5 || -8 || -9) && (0 || 1 || 3 || 5 || -8 || -10) && (2 || 3 || 5 || -6 || -7 || -10) && (1 || 2 || 3 || 4 || -6 || -11))"),
            -- 191/1280:
            (7, parseCnf "((5 || 6 || -12) && (4 || 6 || -11 || -12) && (4 || 5 || 6 || -11) && (3 || 6 || -10 || -11 || -12) && (3 || 4 || 6 || -10 || -12) && (3 || 5 || 6 || -10 || -11) && (3 || 4 || 5 || 6 || -10) && (2 || 3 || 6 || -9 || -11 || -12) && (2 || 4 || 6 || -9 || -10 || -12) && (2 || 5 || 6 || -9 || -10 || -11) && (2 || 3 || 4 || 6 || -9 || -12) && (2 || 3 || 5 || 6 || -9 || -11) && (2 || 4 || 5 || 6 || -9 || -10) && (2 || 3 || 4 || 5 || 6 || -9) && (1 || -7 || -9 || -10 || -11 || -12 || -13) && (4 || -7 || -8 || -9 || -10 || -12 || -13) && (0 || -8 || -9 || -10 || -11 || -12 || -13) && (1 || -8 || -9 || -10 || -11 || -12 || -13) && (2 || -7 || -8 || -10 || -11 || -12 || -13) && (3 || -7 || -8 || -9 || -11 || -12 || -13) && (6 || -7 || -8 || -9 || -10 || -11 || -12) && (1 || 2 || -7 || -10 || -11 || -12 || -13) && (4 || 6 || -7 || -8 || -9 || -10 || -12) && (1 || 4 || -8 || -9 || -10 || -12 || -13) && (2 || 3 || -7 || -8 || -11 || -12 || -13) && (1 || 3 || -8 || -9 || -11 || -12 || -13) && (0 || 5 || -8 || -9 || -10 || -11 || -13) && (1 || 6 || -8 || -9 || -10 || -11 || -12) && (3 || 4 || -7 || -8 || -9 || -12 || -13) && (2 || 6 || -7 || -8 || -10 || -11 || -12) && (0 || 2 || -8 || -10 || -11 || -12 || -13) && (5 || 6 || -7 || -8 || -9 || -10 || -11) && (1 || 2 || -8 || -10 || -11 || -12 || -13) && (0 || 4 || -8 || -9 || -10 || -12 || -13) && (0 || 3 || -8 || -9 || -11 || -12 || -13) && (3 || 6 || -7 || -8 || -9 || -11 || -12) && (1 || 3 || -7 || -9 || -11 || -12 || -13) && (0 || 6 || -8 || -9 || -10 || -11 || -12) && (1 || 5 || -8 || -9 || -10 || -11 || -13) && (2 || 4 || -7 || -8 || -10 || -12 || -13) && (0 || 1 || -9 || -10 || -11 || -12 || -13) && (1 || 5 || -7 || -9 || -10 || -11 || -13) && (1 || 3 || 5 || -8 || -9 || -11 || -13) && (2 || 3 || 4 || -7 || -8 || -12 || -13) && (0 || 3 || 5 || -8 || -9 || -11 || -13) && (1 || 4 || 6 || -8 || -9 || -10 || -12) && (1 || 6 || -7 || -9 || -10 || -11 || -12) && (0 || 1 || 3 || -9 || -11 || -12 || -13) && (0 || 2 || 4 || -8 || -10 || -12 || -13) && (0 || 2 || 3 || -8 || -11 || -12 || -13) && (4 || 5 || 6 || -7 || -8 || -9 || -10) && (2 || 3 || 6 || -7 || -8 || -11 || -12) && (1 || 2 || 3 || -8 || -11 || -12 || -13) && (1 || 3 || 6 || -7 || -9 || -11 || -12) && (0 || 1 || 4 || -9 || -10 || -12 || -13) && (0 || 3 || 4 || -8 || -9 || -12 || -13) && (2 || -9 || -10 || -11 || -12 || -13) && (0 || 1 || 6 || -9 || -10 || -11 || -12) && (0 || 5 || 6 || -8 || -9 || -10 || -11) && (3 || 5 || 6 || -7 || -8 || -9 || -11) && (1 || 5 || 6 || -7 || -9 || -10 || -11) && (1 || 2 || 6 || -8 || -10 || -11 || -12) && (1 || 3 || 6 || -8 || -9 || -11 || -12) && (2 || 4 || 6 || -7 || -8 || -10 || -12) && (1 || 5 || 6 || -8 || -9 || -10 || -11) && (0 || 2 || 5 || -8 || -10 || -11 || -13) && (1 || 4 || 5 || -8 || -9 || -10 || -13) && (1 || 3 || 5 || -7 || -9 || -11 || -13) && (0 || 4 || 5 || -8 || -9 || -10 || -13) && (1 || 2 || 3 || 4 || 5 || -8 || -13) && (1 || 2 || 4 || 5 || -7 || -10 || -13) && (1 || 4 || 5 || 6 || -7 || -9 || -10) && (0 || 3 || 4 || 6 || -8 || -9 || -12) && (0 || 1 || 4 || 5 || -9 || -10 || -13) && (2 || 4 || 5 || -9 || -10 || -13) && (0 || 1 || 4 || 5 || 6 || -9 || -10) && (2 || 3 || 5 || -7 || -8 || -11 || -13) && (1 || 2 || 3 || 4 || -8 || -12 || -13) && (1 || 2 || 3 || 4 || -7 || -12 || -13) && (0 || 2 || 4 || 6 || -8 || -10 || -12) && (1 || 2 || 5 || -8 || -10 || -11 || -13) && (2 || 3 || -9 || -11 || -12 || -13) && (0 || 1 || 3 || 6 || -9 || -11 || -12) && (1 || 2 || 3 || 6 || -8 || -11 || -12) && (0 || 1 || 2 || 4 || -10 || -12 || -13) && (1 || 2 || 3 || 6 || -7 || -11 || -12) && (1 || 4 || 6 || -7 || -9 || -10 || -12) && (0 || 1 || 3 || 4 || -9 || -12 || -13) && (0 || 3 || 4 || 5 || -8 || -9 || -13) && (3 || 4 || 6 || -7 || -8 || -9 || -12) && (1 || 2 || 5 || 6 || -8 || -10 || -11) && (2 || 4 || 5 || 6 || -7 || -8 || -10) && (3 || -10 || -11 || -12 || -13) && (0 || 1 || 2 || 6 || -10 || -11 || -12) && (0 || 2 || 3 || 4 || -8 || -12 || -13) && (2 || 3 || 4 || 6 || -7 || -8 || -12) && (3 || 4 || 5 || 6 || -7 || -8 || -9) && (1 || 3 || 5 || 6 || -8 || -9 || -11) && (0 || 3 || 5 || 6 || -8 || -9 || -11) && (1 || 2 || 5 || 6 || -7 || -10 || -11) && (1 || 4 || 5 || 6 || -8 || -9 || -10) && (2 || 6 || -9 || -10 || -11 || -12) && (2 || 3 || 4 || 5 || -7 || -8 || -13) && (2 || 4 || -9 || -10 || -12 || -13) && (0 || 1 || 4 || 6 || -9 || -10 || -12) && (1 || 2 || 5 || -7 || -10 || -11 || -13) && (1 || 2 || 3 || 5 || -8 || -11 || -13) && (0 || 4 || 5 || 6 || -8 || -9 || -10) && (1 || 3 || 5 || 6 || -7 || -9 || -11) && (1 || 3 || 4 || 6 || -8 || -9 || -12) && (0 || 2 || 3 || 5 || -8 || -11 || -13) && (0 || 1 || 2 || 5 || -10 || -11 || -13) && (1 || 2 || 3 || 4 || 6 || -7 || -12) && (0 || 1 || 3 || 5 || -9 || -11 || -13) && (1 || 3 || 4 || 6 || -7 || -9 || -12) && (0 || 1 || 5 || -9 || -10 || -11 || -13) && (0 || 1 || 2 || 3 || 4 || -12 || -13) && (1 || 2 || 4 || 6 || -7 || -10 || -12) && (2 || 5 || 6 || -7 || -8 || -10 || -11) && (1 || 2 || 4 || 6 || -8 || -10 || -12) && (0 || 2 || 5 || 6 || -8 || -10 || -11) && (6 || -13) && (3 || 4 || 5 || -7 || -8 || -9 || -13) && (0 || 1 || 2 || 3 || 4 || 5 || 6) && (1 || 2 || 4 || 5 || -8 || -10 || -13) && (1 || 2 || 3 || 5 || -7 || -11 || -13) && (1 || 2 || 3 || -7 || -11 || -12 || -13) && (0 || 2 || 6 || -8 || -10 || -11 || -12) && (2 || 5 || -9 || -10 || -11 || -13) && (0 || 1 || 5 || 6 || -9 || -10 || -11) && (3 || 4 || -10 || -12 || -13) && (0 || 1 || 2 || 4 || 6 || -10 || -12) && (2 || 3 || 4 || -9 || -12 || -13) && (0 || 1 || 3 || 4 || 6 || -9 || -12) && (0 || 2 || 4 || 5 || -8 || -10 || -13) && (1 || 2 || 3 || 5 || 6 || -7 || -11) && (0 || 2 || 3 || 4 || 5 || -8 || -13) && (1 || 2 || 4 || 5 || 6 || -7 || -10) && (0 || 2 || 3 || 4 || 6 || -8 || -12) && (0 || 3 || 4 || 5 || 6 || -8 || -9) && (1 || 2 || 3 || 5 || 6 || -8 || -11) && (2 || 3 || 4 || 5 || 6 || -7 || -8) && (0 || 1 || 2 || 3 || 5 || -11 || -13) && (1 || 2 || 3 || 4 || 5 || -7 || -13) && (0 || 1 || 2 || -10 || -11 || -12 || -13) && (1 || 2 || 4 || 5 || 6 || -8 || -10) && (3 || 5 || -10 || -11 || -13) && (5 || -7 || -8 || -9 || -10 || -11 || -13) && (0 || 1 || 2 || 5 || 6 || -10 || -11) && (2 || 3 || 5 || -9 || -11 || -13) && (2 || 5 || -7 || -8 || -10 || -11 || -13) && (0 || 1 || 3 || 5 || 6 || -9 || -11) && (1 || 3 || 4 || 5 || 6 || -8 || -9) && (0 || 1 || 2 || 4 || 5 || -10 || -13) && (1 || 3 || 4 || 5 || 6 || -7 || -9) && (1 || 2 || 6 || -7 || -10 || -11 || -12) && (0 || 1 || 2 || 3 || -11 || -12 || -13) && (1 || 2 || 3 || 4 || 5 || 6 || -8) && (4 || 5 || -11 || -13) && (3 || 5 || -7 || -8 || -9 || -11 || -13) && (0 || 1 || 2 || 3 || 5 || 6 || -11) && (0 || 2 || 3 || 4 || 5 || 6 || -8) && (0 || 2 || 3 || 5 || 6 || -8 || -11) && (0 || 2 || 4 || 5 || 6 || -8 || -10) && (-7 || -8 || -9 || -10 || -11 || -12 || -13) && (1 || 2 || 3 || 4 || 5 || 6 || -7) && (1 || 3 || 4 || -8 || -9 || -12 || -13) && (0 || 1 || 2 || 3 || 4 || 5 || -13) && (1 || 2 || 4 || -8 || -10 || -12 || -13) && (0 || 1 || 3 || 4 || 5 || -9 || -13) && (1 || 3 || 4 || 5 || -7 || -9 || -13) && (1 || 4 || 5 || -7 || -9 || -10 || -13) && (1 || 3 || 4 || 5 || -8 || -9 || -13) && (5 || -12 || -13) && (0 || 1 || 2 || 3 || 4 || 6 || -12) && (0 || 4 || 6 || -8 || -9 || -10 || -12) && (1 || 3 || 4 || -7 || -9 || -12 || -13) && (1 || 2 || 4 || -7 || -10 || -12 || -13) && (0 || 2 || 3 || 6 || -8 || -11 || -12) && (2 || 3 || 4 || 5 || -9 || -13) && (2 || 4 || 5 || -7 || -8 || -10 || -13) && (0 || 1 || 3 || 4 || 5 || 6 || -9) && (4 || -11 || -12 || -13) && (0 || 1 || 2 || 3 || 6 || -11 || -12) && (2 || 3 || 5 || 6 || -7 || -8 || -11) && (1 || 2 || 3 || 4 || 6 || -8 || -12) && (1 || 4 || -7 || -9 || -10 || -12 || -13) && (0 || 3 || 6 || -8 || -9 || -11 || -12) && (3 || 4 || 5 || -10 || -13) && (4 || 5 || -7 || -8 || -9 || -10 || -13) && (0 || 1 || 2 || 4 || 5 || 6 || -10))")
        ]),
        ("ge", Map.fromList [
            -- 1/2:
            (1, parseCnf "((0 || -1))"),
            -- 3/8:
            (2, parseCnf "((1 || -3) && (0 || -2 || -3) && (0 || 1 || -2))"),
            -- 7/24:
            (3, parseCnf "((2 || -5) && (1 || -4 || -5) && (1 || 2 || -4) && (0 || -3 || -4 || -5) && (0 || 2 || -3 || -4) && (0 || 1 || -3 || -5) && (0 || 1 || 2 || -3))"),
            -- 15/64:
            (4, parseCnf "((3 || -7) && (2 || -6 || -7) && (2 || 3 || -6) && (1 || -5 || -6 || -7) && (1 || 3 || -5 || -6) && (1 || 2 || -5 || -7) && (0 || -4 || -5 || -6 || -7) && (0 || 2 || -4 || -5 || -7) && (1 || 2 || 3 || -5) && (0 || 1 || -4 || -6 || -7) && (0 || 3 || -4 || -5 || -6) && (0 || 2 || 3 || -4 || -5) && (0 || 1 || 3 || -4 || -6) && (0 || 1 || 2 || -4 || -7) && (0 || 1 || 2 || 3 || -4))"),
            -- 31/160:
            (5, parseCnf "((4 || -9) && (3 || -8 || -9) && (3 || 4 || -8) && (2 || -7 || -8 || -9) && (2 || 3 || -7 || -9) && (2 || 4 || -7 || -8) && (2 || 3 || 4 || -7) && (1 || -6 || -7 || -8 || -9) && (1 || 4 || -6 || -7 || -8) && (1 || 3 || -6 || -7 || -9) && (1 || 2 || 4 || -6 || -8) && (1 || 2 || 3 || -6 || -9) && (0 || -5 || -6 || -7 || -8 || -9) && (0 || 3 || -5 || -6 || -7 || -9) && (0 || 4 || -5 || -6 || -7 || -8) && (0 || 2 || -5 || -6 || -8 || -9) && (1 || 3 || 4 || -6 || -7) && (0 || 1 || -5 || -7 || -8 || -9) && (0 || 2 || 3 || -5 || -6 || -9) && (0 || 1 || 4 || -5 || -7 || -8) && (0 || 2 || 4 || -5 || -6 || -8) && (0 || 3 || 4 || -5 || -6 || -7) && (0 || 1 || 3 || -5 || -7 || -9) && (0 || 1 || 3 || 4 || -5 || -7) && (0 || 1 || 2 || 3 || -5 || -9) && (0 || 1 || 2 || 4 || -5 || -8) && (1 || 2 || 3 || 4 || -6) && (0 || 1 || 2 || -5 || -8 || -9) && (1 || 2 || -6 || -8 || -9) && (0 || 2 || 3 || 4 || -5 || -6) && (0 || 1 || 2 || 3 || 4 || -5))"),
            -- 63/384:
            (6, parseCnf "((5 || -11) && (4 || -10 || -11) && (4 || 5 || -10) && (3 || -9 || -10 || -11) && (3 || 5 || -9 || -10) && (3 || 4 || -9 || -11) && (3 || 4 || 5 || -9) && (2 || -8 || -9 || -10 || -11) && (2 || 3 || -8 || -10 || -11) && (2 || 5 || -8 || -9 || -10) && (2 || 4 || -8 || -9 || -11) && (2 || 4 || 5 || -8 || -9) && (2 || 3 || 5 || -8 || -10) && (2 || 3 || 4 || -8 || -11) && (2 || 3 || 4 || 5 || -8) && (1 || -7 || -8 || -9 || -10 || -11) && (1 || 5 || -7 || -8 || -9 || -10) && (1 || 3 || 5 || -7 || -8 || -10) && (1 || 2 || 5 || -7 || -9 || -10) && (1 || 2 || 3 || 5 || -7 || -10) && (1 || 2 || 3 || 4 || -7 || -11) && (0 || -6 || -7 || -8 || -9 || -10 || -11) && (1 || 4 || 5 || -7 || -8 || -9) && (0 || 1 || -6 || -8 || -9 || -10 || -11) && (0 || 3 || -6 || -7 || -8 || -10 || -11) && (0 || 2 || -6 || -7 || -9 || -10 || -11) && (0 || 4 || -6 || -7 || -8 || -9 || -11) && (0 || 5 || -6 || -7 || -8 || -9 || -10) && (1 || 3 || 4 || 5 || -7 || -8) && (0 || 1 || 3 || -6 || -8 || -10 || -11) && (1 || 2 || -7 || -9 || -10 || -11) && (0 || 3 || 5 || -6 || -7 || -8 || -10) && (0 || 3 || 4 || -6 || -7 || -8 || -11) && (0 || 2 || 3 || -6 || -7 || -10 || -11) && (0 || 1 || 5 || -6 || -8 || -9 || -10) && (0 || 1 || 4 || -6 || -8 || -9 || -11) && (1 || 2 || 4 || 5 || -7 || -9) && (0 || 1 || 2 || -6 || -9 || -10 || -11) && (1 || 2 || 3 || -7 || -10 || -11) && (0 || 4 || 5 || -6 || -7 || -8 || -9) && (0 || 1 || 3 || 4 || -6 || -8 || -11) && (1 || 3 || -7 || -8 || -10 || -11) && (0 || 2 || 3 || 5 || -6 || -7 || -10) && (0 || 1 || 2 || 4 || -6 || -9 || -11) && (0 || 1 || 4 || 5 || -6 || -8 || -9) && (0 || 2 || 3 || 4 || -6 || -7 || -11) && (1 || 2 || 4 || -7 || -9 || -11) && (0 || 3 || 4 || 5 || -6 || -7 || -8) && (0 || 2 || 4 || -6 || -7 || -9 || -11) && (0 || 1 || 3 || 5 || -6 || -8 || -10) && (0 || 2 || 5 || -6 || -7 || -9 || -10) && (1 || 2 || 3 || 4 || 5 || -7) && (0 || 1 || 2 || 3 || -6 || -10 || -11) && (0 || 1 || 2 || 4 || 5 || -6 || -9) && (0 || 1 || 2 || 5 || -6 || -9 || -10) && (1 || 3 || 4 || -7 || -8 || -11) && (0 || 2 || 3 || 4 || 5 || -6 || -7) && (0 || 1 || 3 || 4 || 5 || -6 || -8) && (1 || 4 || -7 || -8 || -9 || -11) && (0 || 2 || 4 || 5 || -6 || -7 || -9) && (0 || 1 || 2 || 3 || 4 || -6 || -11) && (0 || 1 || 2 || 3 || 5 || -6 || -10) && (0 || 1 || 2 || 3 || 4 || 5 || -6))"),
            -- 127/896:
            (7, parseCnf "((6 || -13) && (5 || 6 || -12) && (4 || 6 || -11 || -12) && (4 || 5 || -11 || -13) && (3 || -10 || -11 || -12 || -13) && (3 || 6 || -10 || -11 || -12) && (3 || 4 || 6 || -10 || -12) && (3 || 4 || 5 || -10 || -13) && (2 || -9 || -10 || -11 || -12 || -13) && (2 || 6 || -9 || -10 || -11 || -12) && (2 || 3 || 6 || -9 || -11 || -12) && (2 || 4 || 6 || -9 || -10 || -12) && (2 || 5 || 6 || -9 || -10 || -11) && (2 || 3 || 5 || -9 || -11 || -13) && (2 || 4 || 5 || -9 || -10 || -13) && (2 || 3 || 4 || 5 || -9 || -13) && (2 || 3 || 4 || 6 || -9 || -12) && (1 || -8 || -9 || -10 || -11 || -12 || -13) && (1 || 4 || -8 || -9 || -10 || -12 || -13) && (1 || 5 || -8 || -9 || -10 || -11 || -13) && (1 || 2 || -8 || -10 || -11 || -12 || -13) && (1 || 3 || -8 || -9 || -11 || -12 || -13) && (1 || 2 || 3 || -8 || -11 || -12 || -13) && (1 || 3 || 4 || -8 || -9 || -12 || -13) && (1 || 5 || 6 || -8 || -9 || -10 || -11) && (1 || 2 || 5 || -8 || -10 || -11 || -13) && (1 || 4 || 5 || -8 || -9 || -10 || -13) && (1 || 2 || 4 || -8 || -10 || -12 || -13) && (1 || 3 || 5 || -8 || -9 || -11 || -13) && (1 || 3 || 4 || 6 || -8 || -9 || -12) && (0 || 1 || 2 || 3 || 4 || -7 || -12 || -13) && (1 || 2 || 4 || 6 || -8 || -10 || -12) && (1 || 2 || 3 || 5 || -8 || -11 || -13) && (1 || 2 || 4 || 5 || -8 || -10 || -13) && (1 || 4 || 5 || 6 || -8 || -9 || -10) && (1 || 2 || 5 || 6 || -8 || -10 || -11) && (1 || 3 || 5 || 6 || -8 || -9 || -11) && (1 || 2 || 3 || 4 || -8 || -12 || -13) && (1 || 2 || 3 || 5 || 6 || -8 || -11) && (1 || 2 || 3 || 4 || 6 || -8 || -12) && (1 || 2 || 4 || 5 || 6 || -8 || -10) && (1 || 3 || 4 || 5 || 6 || -8 || -9) && (1 || 2 || 3 || 4 || 5 || 6 || -8) && (0 || 1 || 2 || 3 || 4 || 5 || 6 || -7) && (0 || -7 || -8 || -9 || -10 || -11 || -12 || -13) && (0 || 2 || -7 || -8 || -10 || -11 || -12 || -13) && (0 || 3 || -7 || -8 || -9 || -11 || -12 || -13) && (0 || 1 || -7 || -9 || -10 || -11 || -12 || -13) && (0 || 4 || -7 || -8 || -9 || -10 || -12 || -13) && (0 || 6 || -7 || -8 || -9 || -10 || -11 || -12) && (3 || 5 || 6 || -10 || -11) && (0 || 5 || -7 || -8 || -9 || -10 || -11 || -13) && (1 || 6 || -8 || -9 || -10 || -11 || -12) && (0 || 1 || 3 || -7 || -9 || -11 || -12 || -13) && (1 || 3 || 4 || 5 || -8 || -9 || -13) && (0 || 1 || 5 || -7 || -9 || -10 || -11 || -13) && (0 || 1 || 2 || 3 || -7 || -11 || -12 || -13) && (1 || 2 || 6 || -8 || -10 || -11 || -12) && (1 || 3 || 6 || -8 || -9 || -11 || -12) && (0 || 1 || 4 || -7 || -9 || -10 || -12 || -13) && (4 || 5 || 6 || -11) && (0 || 3 || 5 || -7 || -8 || -9 || -11 || -13) && (2 || 3 || -9 || -11 || -12 || -13) && (0 || 1 || 6 || -7 || -9 || -10 || -11 || -12) && (0 || 1 || 2 || -7 || -10 || -11 || -12 || -13) && (0 || 2 || 4 || -7 || -8 || -10 || -12 || -13) && (3 || 4 || 5 || 6 || -10) && (0 || 4 || 5 || -7 || -8 || -9 || -10 || -13) && (0 || 2 || 3 || -7 || -8 || -11 || -12 || -13) && (2 || 3 || 5 || 6 || -9 || -11) && (0 || 2 || 5 || -7 || -8 || -10 || -11 || -13) && (0 || 2 || 4 || 5 || -7 || -8 || -10 || -13) && (2 || 3 || 4 || 5 || 6 || -9) && (0 || 1 || 2 || 4 || -7 || -10 || -12 || -13) && (1 || 2 || 3 || 6 || -8 || -11 || -12) && (1 || 4 || 6 || -8 || -9 || -10 || -12) && (0 || 1 || 3 || 4 || -7 || -9 || -12 || -13) && (2 || 3 || 4 || -9 || -12 || -13) && (0 || 1 || 4 || 6 || -7 || -9 || -10 || -12) && (0 || 1 || 3 || 5 || -7 || -9 || -11 || -13) && (0 || 1 || 4 || 5 || -7 || -9 || -10 || -13) && (0 || 3 || 4 || 5 || -7 || -8 || -9 || -13) && (0 || 2 || 4 || 6 || -7 || -8 || -10 || -12) && (0 || 4 || 5 || 6 || -7 || -8 || -9 || -10) && (2 || 4 || 5 || 6 || -9 || -10) && (0 || 2 || 3 || 5 || -7 || -8 || -11 || -13) && (2 || 4 || -9 || -10 || -12 || -13) && (0 || 1 || 3 || 6 || -7 || -9 || -11 || -12) && (1 || 2 || 3 || 4 || 5 || -8 || -13) && (0 || 1 || 2 || 5 || -7 || -10 || -11 || -13) && (0 || 1 || 2 || 5 || 6 || -7 || -10 || -11) && (0 || 2 || 3 || 4 || -7 || -8 || -12 || -13) && (0 || 3 || 5 || 6 || -7 || -8 || -9 || -11) && (0 || 2 || 3 || 6 || -7 || -8 || -11 || -12) && (0 || 2 || 4 || 5 || 6 || -7 || -8 || -10) && (0 || 3 || 4 || 6 || -7 || -8 || -9 || -12) && (0 || 3 || 4 || -7 || -8 || -9 || -12 || -13) && (0 || 1 || 5 || 6 || -7 || -9 || -10 || -11) && (0 || 1 || 2 || 4 || 5 || -7 || -10 || -13) && (0 || 3 || 4 || 5 || 6 || -7 || -8 || -9) && (0 || 2 || 3 || 4 || 6 || -7 || -8 || -12) && (0 || 1 || 3 || 5 || 6 || -7 || -9 || -11) && (4 || -11 || -12 || -13) && (0 || 1 || 2 || 6 || -7 || -10 || -11 || -12) && (0 || 2 || 3 || 4 || 5 || -7 || -8 || -13) && (0 || 1 || 2 || 3 || 5 || -7 || -11 || -13) && (0 || 1 || 3 || 4 || 5 || -7 || -9 || -13) && (0 || 1 || 4 || 5 || 6 || -7 || -9 || -10) && (0 || 2 || 3 || 4 || 5 || 6 || -7 || -8) && (0 || 2 || 6 || -7 || -8 || -10 || -11 || -12) && (0 || 5 || 6 || -7 || -8 || -9 || -10 || -11) && (5 || -12 || -13) && (0 || 1 || 2 || 4 || 6 || -7 || -10 || -12) && (0 || 1 || 2 || 4 || 5 || 6 || -7 || -10) && (0 || 4 || 6 || -7 || -8 || -9 || -10 || -12) && (0 || 2 || 3 || 5 || 6 || -7 || -8 || -11) && (3 || 5 || -10 || -11 || -13) && (0 || 1 || 2 || 3 || 4 || 6 || -7 || -12) && (0 || 3 || 6 || -7 || -8 || -9 || -11 || -12) && (0 || 2 || 5 || 6 || -7 || -8 || -10 || -11) && (2 || 5 || -9 || -10 || -11 || -13) && (0 || 1 || 3 || 4 || 6 || -7 || -9 || -12) && (0 || 1 || 3 || 4 || 5 || 6 || -7 || -9) && (0 || 1 || 2 || 3 || 4 || 5 || -7 || -13) && (3 || 4 || -10 || -12 || -13) && (0 || 1 || 2 || 3 || 6 || -7 || -11 || -12) && (0 || 1 || 2 || 3 || 5 || 6 || -7 || -11))")
        ])
    ]),
    ("OptNatStruct1Ex",  Map.fromList [
        ("add", Map.fromList [
            (1, parseCnf "((-1 || -3) && (-1 || 2) && (2 || -3) && (1 || -2 || 3) && (-0 || 3) && (0 || -3))"),
            (2, parseCnf "((-1 || -6) && (-1 || -3) && (-3 || -6) && (0 || -2 || 4) && (0 || 2 || -4) && (5 || -6) && (-1 || 5) && (-0 || -2 || -4) && (-0 || 2 || 4) && (-3 || 5) && (1 || 3 || -5 || 6) && (2 || -6) && (0 || -6) && (-0 || -2 || 6))"),
            (3, parseCnf "((-2 || -5) && (-2 || 8) && (-1 || -2 || -9) && (-0 || -3 || -6) && (-1 || -5 || -9) && (-2 || -4 || 7) && (-1 || 8 || -9) && (-1 || -4 || -7 || 9) && (-0 || 3 || 6) && (1 || 2 || 5 || -8 || 9) && (1 || -4 || -7 || -9) && (-5 || 8) && (2 || 4 || 5 || -7 || -8) && (1 || 4 || 7 || -9) && (-4 || 7 || 8) && (-4 || -5 || 7) && (0 || -3 || 6) && (1 || 4 || -7 || 9) && (-1 || 4 || 7 || 9) && (0 || 3 || -6) && (-1 || -4 || 7 || -9) && (3 || -9) && (0 || -9) && (-0 || -3 || 9))"),
            -- 40/145 (better than without extra var):
            (4, parseCnf "((-7 || 11) && (-3 || 11) && (-0 || -4 || -8) && (-2 || -3 || -6) && (-7 || 10 || -12) && (3 || 7 || -10 || -11 || 12) && (1 || 4 || 5 || -9) && (-2 || 6 || 10 || 12) && (0 || -4 || 8) && (-0 || -1 || -5 || 8 || 9) && (10 || 11 || -12) && (-3 || 10 || -12) && (2 || -6 || 10 || 12) && (-0 || 1 || 5 || 8 || 9) && (2 || 6 || -10 || 12) && (-3 || -7) && (1 || 4 || -5 || 9) && (0 || 4 || -8) && (-2 || -6 || -7) && (-0 || 1 || -5 || 8 || -9) && (-2 || -6 || 11) && (-0 || -1 || 5 || 8 || -9) && (-1 || 4 || 5 || 9) && (1 || -5 || -8 || 9) && (-1 || 5 || -8 || 9) && (-1 || -5 || -8 || -9) && (-2 || -6 || 10 || -12) && (-2 || 6 || -10 || -12) && (2 || 3 || 6 || 7 || -11) && (-1 || 4 || -5 || -9) && (2 || -6 || -10 || -12) && (1 || 5 || -8 || -9) && (0 || 1 || -12) && (1 || 4 || -12) && (-1 || -5 || 12) && (1 || 5 || -12) && (0 || 5 || -12) && (4 || 5 || -12) && (-0 || -1 || -4 || 12) && (-0 || -4 || -5 || 12))")
        ]),
        ("mul", Map.fromList [
            (1, parseCnf "((1 || -2) && (3) && (0 || -2) && (-0 || -1 || 2) && (3))"),
            (2, parseCnf "((-3 || -6) && (0 || -4) && (2 || -4) && (-0 || -2 || 4) && (-0 || -3 || 5) && (0 || -3 || -5) && (3 || -5 || 6) && (2 || -5 || -6) && (-2 || 5 || -6) && (-1 || 6) && (1 || -6))"),
            (3, parseCnf "((-5 || -9) && (0 || -6) && (3 || -6) && (-0 || -5 || 8) && (-1 || -4 || 8) && (-1 || -4 || -6) && (3 || -8 || -9) && (-0 || -4 || 7) && (0 || 3 || -7) && (3 || 4 || -7) && (1 || 4 || -7) && (-1 || -5) && (0 || -5 || -8) && (-4 || -9) && (4 || 5 || -8 || 9) && (1 || 5 || -8 || 9) && (-3 || 8 || -9) && (-0 || -3 || 6) && (-1 || -3 || 7) && (0 || 1 || -7) && (-2 || 9) && (2 || -9))"),
            -- 4 Bit is worse (39,125) than without extra variables (37,123)
            -- This is the replacement:
            -- [Equiv [Atom (Variable 12),And [Or [],Or [And [And [Atom (Variable 3),Atom (Variable 4)],Or [And [And [Atom (Variable 2),Atom (Variable 4)],And [And [Atom (Variable 0),Atom (Variable 5)],And [Atom (Variable 1),Atom (Variable 4)]]],And [And [Atom (Variable 1),Atom (Variable 5)],And [And [Atom (Variable 0),Atom (Variable 5)],And [Atom (Variable 1),Atom (Variable 4)]]],And [And [Atom (Variable 1),Atom (Variable 5)],And [Atom (Variable 2),Atom (Variable 4)]]]],And [And [Atom (Variable 2),Atom (Variable 5)],Or [And [And [Atom (Variable 2),Atom (Variable 4)],And [And [Atom (Variable 0),Atom (Variable 5)],And [Atom (Variable 1),Atom (Variable 4)]]],And [And [Atom (Variable 1),Atom (Variable 5)],And [And [Atom (Variable 0),Atom (Variable 5)],And [Atom (Variable 1),Atom (Variable 4)]]],And [And [Atom (Variable 1),Atom (Variable 5)],And [Atom (Variable 2),Atom (Variable 4)]]]], And [And [Atom (Variable 2),Atom (Variable 5)],And [Atom (Variable 3),Atom (Variable 4)]]]]]]
            (4, parseCnf "((-12) && (-3 || -6) && (4 || -8) && (-2 || -5 || 11) && (-0 || -6 || 10) && (-3 || 4 || -11) && (-0 || -4 || 8) && (1 || 5 || -9) && (0 || 4 || -9) && (-0 || -5 || 9 || -10) && (-1 || -6 || 11) && (0 || -7 || -11) && (-1 || -5 || 8 || 10) && (-1 || -4 || 5 || 9) && (-3 || -7) && (4 || 5 || 6 || -10) && (1 || 4 || 6 || -10) && (0 || 1 || 2 || -10) && (-1 || -2 || -4 || -5) && (-2 || -6) && (-3 || -5) && (2 || 6 || -8 || -10) && (-0 || -7 || 11) && (-3 || -4 || 11) && (0 || 1 || -9) && (-1 || -4 || 9 || -10) && (4 || 5 || -9) && (-1 || -7) && (0 || -8) && (0 || 2 || 5 || -10) && (-0 || 1 || -5 || 9) && (2 || 6 || -10 || -11) && (-2 || -4 || 10) && (-0 || 2 || -5 || 7 || -9 || -11) && (-1 || -5 || -8 || 11) && (1 || 2 || 3 || 7 || -11) && (3 || 5 || 6 || 7 || -11) && (-2 || -7) && (-12))")
        ]),
        ("gt", Map.fromList [
        ]),
        ("ge", Map.fromList [
        ])
    ]),
    ("OptNatGen1Ex",  Map.fromList [
            ("add", Map.fromList [
            ]),
            ("mul", Map.fromList [
                (3, parseCnf "((3 || 4 || -7) && (0 || 1 || -7) && (2 || 5 || -6 || -8) && (-2 || -3 || 8) && (-0 || -5 || 8) && (1 || -8 || -9) && (3 || 5 || 9) && (0 || 2 || 9) && (4 || -8 || -9) && (-0 || -3 || 6) && (-1 || -3 || 7) && (-0 || -4 || 7) && (3 || -6) && (0 || -6) && (-1 || -4 || 8) && (1 || 4 || -7) && (-2 || -4) && (-1 || -5) && (-2 || -5) && (0 || 3 || -7))")
            ])
    ]),
    ("OptNatTruth1Ex",  Map.fromList [
        ("add", Map.fromList [
            get "OptNatNoExtra" "add" 1,
            (2, parseCnf "((-3 || -6) && (-3 || 5) && (-1 || 6) && (-0 || -2 || 6) && (-0 || -1 || -2) && (-0 || 2 || 4) && (0 || -2 || 4) && (0 || 2 || -4) && (1 || 2 || 3 || -5) && (1 || 3 || -4 || -5) && (5 || -6))")
        ]),
        ("mul", Map.fromList [
            get "OptNatNoExtra" "mul" 1,
            get "OptNatNoExtra" "mul" 2
        ]),
        ("gt", Map.fromList [
            get "OptNatNoExtra" "gt" 1,
            get "OptNatNoExtra" "gt" 2,
            (3, parseCnf "((-5 || -6) && (-3 || -4 || 6) && (0 || -4 || 6) && (0 || 1 || 6) && (1 || -4 || 6) && (1 || -3 || 6) && (2 || -6) && (2 || -5))")
        ]),
        ("ge", Map.fromList [
            get "OptNatNoExtra" "ge" 1,
            get "OptNatNoExtra" "ge" 2,
            (3, parseCnf "((-5 || 6) && (0 || -3 || -4 || -6) && (0 || 1 || -3 || -6) && (1 || -4 || -6) && (2 || -5) && (2 || 6))")
        ])
    ])
    ]

get :: String -> String -> Int -> (Int, Formula)
get minMode arithmeticOp numBits =
    let f = fromJust $ getIfAvailable minMode arithmeticOp numBits
    in (numBits, f)

getIfAvailable :: String -> String -> Int -> Maybe Formula
getIfAvailable minMode arithmeticOp numBits =
    Map.lookup minMode formulas >>= Map.lookup arithmeticOp >>= Map.lookup numBits

techniques :: [String]
techniques
    | Set.fromList (Map.keys formulas) /= Set.fromList ordered = error "CalculatedFormulas.techniques: Invalid technique keys."
    | otherwise = ordered
    where ordered = ["OptNatNoExtra", "OptNatStruct1Ex", "OptNatTruth1Ex", "OptNatGen1Ex"]

latexTable :: String
latexTable = latexTableWith [
    ("add", [1..5]),
    ("mul", [1..5]),
    ("gt", [1..7]),
    ("ge", [1..7])
    ]

printOp :: String -> Int -> String
printOp op numBits = opName ++ " & " ++ show numBits
    where opName = case op of
            "add" -> "$+$"
            "mul" -> "$\\cdot$"
            "gt" -> "$>$"
            "ge" -> "$\\geq$"
            _ -> "?"

printTech :: String -> String
printTech "OptNatNoExtra" = "$k=0$"
printTech "OptNatStruct1Ex" = "$k=1$ (struct)"
printTech "OptNatTruth1Ex" = "$k=1$ (truth)"
printTech "OptNatGen1Ex" = "$k=1$ (gen)"

latexTableWith :: [(String,[Int])] -> String
latexTableWith selection =
    let begin = "\\begin{tabular}{" ++ intercalate " | " (replicate (2 + length techniques) "c") ++ "}\n"
        header = intercalate " & " ("Op" : "Bits" : map printTech techniques) ++ "\\\\\n\\hline\n"
        makeLine op numBits = intercalate " & " $ printOp op numBits : map (makeCell op numBits) techniques
        theLines = concat [concatMap (\b -> makeLine op b ++ "\\\\\n") bitNums ++ "\\hline\n" | (op,bitNums) <- selection]
        end = "\\end{tabular}\n"
    in begin ++ header ++ theLines ++ end

makeCell :: String -> Int -> String -> String
makeCell op numBits technique =
    let otherScores = catMaybes $ map (\tech -> fmap (numLiterals . getStats) $ getIfAvailable tech op numBits) $ delete technique techniques
        noExtraVarScore = maybe (maxBound::Int) (numLiterals . getStats) $ getIfAvailable "OptNatNoExtra" op numBits :: Int
    in case getIfAvailable technique op numBits of
        Nothing -> " "
        Just cnf ->
            let stats = getStats cnf
                isBest = all (numLiterals stats <=) otherScores
                shouldColor
                    | not isBest = False
                    | technique == "OptNatNoExtra" = isBest
                    | otherwise = numLiterals stats < noExtraVarScore
                color cell
                    | shouldColor = "$\\Color{OliveGreen}{" ++ cell ++ "}$"
                    | otherwise = cell
            in color $ show (numClauses stats) ++ "/" ++ show (numLiterals stats)
